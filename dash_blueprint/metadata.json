{
  "src/lib/components/Button.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "All dashEvents that can be fired"
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      }
    }
  },
  "src/lib/components/ButtonGroup.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/DatePicker.react.js": {
    "description": "Wrapper around the blueprint ResizeSensor component. Resize events are fired each time the child div\nresizes, with a custom debounce timeout to ensure we aren't overloaded with events.\n@param props\n@returns {*}\n@constructor",
    "displayName": "DatePicker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "date",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date",
        "defaultValue": {
          "value": "Date.now()",
          "computed": true
        }
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'change'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "All dashEvents that can be fired"
      }
    }
  },
  "src/lib/components/Menu.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/MenuItem.react.js": {
    "description": "Wrapper around the blueprint MenuItem component. We also override the onClick\nmethod to make it behave like a dash Link rather than a regular URL.\n@param props\n@returns {*}\n@constructor",
    "displayName": "MenuItem",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display"
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display text as multiline item"
      }
    }
  },
  "src/lib/components/Popover.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "boundary": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "boundary",
        "defaultValue": {
          "value": "\"scrollParent\"",
          "computed": false
        }
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "150",
          "computed": false
        }
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "PopoverInteractionKind.CLICK",
          "computed": true
        }
      },
      "modifiers": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "openOnTargetFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"auto\"",
          "computed": false
        }
      },
      "targetTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrapperTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ResizeSensor.react.js": {
    "description": "Wrapper around the blueprint ResizeSensor component. Resize events are fired each time the child div\nresizes, with a custom debounce timeout to ensure we aren't overloaded with events.\n@param props\n@returns {*}\n@constructor",
    "displayName": "ResizeSensor",
    "methods": [
      {
        "name": "onResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "entries",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "observeParents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to observe parent sizes",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "debounceTimer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "How long to debounce before firing an event. Useful for situations\nwhere dynamic resizing would cause a lot of events to fire.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The current size of the observed e.g.\n{'x': 0, 'y': 0, 'width': 884, 'height': 17.265625, 'top': 0,\n 'right': 884, 'bottom': 17.265625, 'left': 0}\nTODO use a proper PropType"
      },
      "fireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'resize'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "All dashEvents that can be fired"
      }
    }
  }
}
