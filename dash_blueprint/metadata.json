{
  "src/lib/components/Button.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display in an active state. This is equivalent to setting className={Classes.ACTIVE}."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered within the button. Passing \"left\" or \"right\" will align the button text to that side and push icon and rightIcon to either edge. Passing \"center\" will center the text and icons together.\nChoice of (`left`, `right`, `center`)"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use minimal styles."
      },
      "rightIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the text."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use small styles."
      }
    }
  },
  "src/lib/components/ButtonGroup.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/Checkbox.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/CheckboxGroup.react.js": {
    "description": "Wrapper around the blueprint FormGroup component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "CheckboxGroup",
    "methods": [
      {
        "name": "handleChildChange",
        "docblock": "Similar to a FormGroup, but this wraps up a set of checkboxes into a similar form\nto the standard dash Checkbox\n\n@param {string} key \n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            }
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            }
          }
        ],
        "returns": null,
        "description": "Similar to a FormGroup, but this wraps up a set of checkboxes into a similar form\nto the standard dash Checkbox"
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Label for the form group",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      }
    }
  },
  "src/lib/components/DateInput.react.js": {
    "description": "Wrapper around the blueprint DateInput component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "DateInput",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "date",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set.",
        "defaultValue": {
          "value": "Date.now()",
          "computed": true
        }
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "\"Today\"",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/DatePicker.react.js": {
    "description": "Wrapper around the blueprint DateInput component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "DatePicker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "date",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set.",
        "defaultValue": {
          "value": "Date.now()",
          "computed": true
        }
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n        This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n        Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "\"Today\"",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "someData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/DateRangeInput.react.js": {
    "description": "Wrapper around the blueprint DateRangeInput component. Events are fired with each change to the selection\n@param props\n@returns {*}\n@constructor",
    "displayName": "DateRangeInput",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dateRange",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a range of dates are displayed or not. If true, preset shortcuts will be displayed. If false, no shortcuts will be displayed. If an array is provided, the custom shortcuts will be displayed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "start_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "end_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "\"Today\"",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/DateRangePicker.react.js": {
    "description": "Wrapper around the blueprint DateInput component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "DateRangePicker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dateRange",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a range of dates are displayed or not. If true, preset shortcuts will be displayed. If false, no shortcuts will be displayed. If an array is provided, the custom shortcuts will be displayed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "start_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "end_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "\"Today\"",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for element.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/EditableText.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "EditableText",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleConfirm",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "confirmOnEnterKey": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and in multiline mode, the enter key will trigger onConfirm and mod+enter will insert a newline. If false, the key bindings are inverted such that enter adds a newline.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "defaultValue": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Default text value of uncontrolled input."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text can be edited.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element.\n= \"none\"\n| \"primary\"\n| \"success\"\n| \"warning\"\n| \"danger\""
      },
      "isEditing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component is currently being edited."
      },
      "maxLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of characters allowed. Unlimited by default."
      },
      "maxLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of lines before scrolling begins, when multiline."
      },
      "minLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum number of lines (essentially minimum height), when multiline.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "minWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum width in pixels of the input, when not multiline."
      },
      "multiline": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether the component supports multiple lines of text. This prop should not be changed during the component's lifetime.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text when there is no value.",
        "defaultValue": {
          "value": "\"Click to Edit\"",
          "computed": false
        }
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hether the entire text field should be selected on focus. If false, the cursor is placed at the end of the text. This prop is ignored on inputs with type other then text, search, url, tel and password. See https://html.spec.whatwg.org/multipage/input.html#do-not-apply for details.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The type of input that should be shown, when not multiline."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text value of controlled input."
      },
      "confirmedValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text value when input has been confirmed."
      }
    }
  },
  "src/lib/components/FormGroup.react.js": {
    "description": "Wrapper around the blueprint FormGroup component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "FormGroup",
    "methods": [
      {
        "name": "initState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChildChange",
        "docblock": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested.\n\n@param {string} key \n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            }
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            }
          }
        ],
        "returns": null,
        "description": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "childData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Label for the form group",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "nRows": {
        "defaultValue": {
          "value": "100",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/H1.react.js": {
    "description": "",
    "displayName": "H1",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H2.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H3.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/HTMLTable.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "HTMLTable",
    "methods": [
      {
        "name": "handleRowClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables borders between rows and cells."
      },
      "condensed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use small, condensed appearance."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables hover styles on row."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use small, condensed appearance for this element and all child elements."
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use an alternate background color on odd rows."
      },
      "row_click": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key for the clicked row"
      },
      "sort_column": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column to sort values on"
      },
      "sort_direction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sort direction (asc or desc)",
        "defaultValue": {
          "value": "'asc'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Hotkey.react.js": {
    "description": "",
    "displayName": "Hotkey",
    "methods": [
      {
        "name": "fireEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "label",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "n_presses": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this shortcut has been fired.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_presses_timestamp": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_presses changed. This can be used to tell\nwhich event was fired most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "hotkey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Signifies the last hotkey that was pressed",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The keyboard combination to fire the event",
        "defaultValue": {
          "value": "\"shift + s\"",
          "computed": false
        }
      },
      "glob": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the key should be enabled globally or only on focus",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for component",
        "defaultValue": {
          "value": "\"hotkey\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ListGroup.react.js": {
    "description": "",
    "displayName": "ListGroup",
    "methods": [
      {
        "name": "recalcList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nRows",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "initState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChildChange",
        "docblock": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested.\n\n@param {string} key \n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            }
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            }
          }
        ],
        "returns": null,
        "description": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "childData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Child component data"
      },
      "listData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "List of child data for currently visible rows"
      },
      "nRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether to show a limited number of children",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "minRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Min number of rows to show",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "maxRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max number of rows to show",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Menu.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/MenuDivider.react.js": {
    "description": "",
    "displayName": "MenuDivider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional header title."
      },
      "tagName": {
        "defaultValue": {
          "value": "'div'",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/MenuItem.react.js": {
    "description": "Wrapper around the blueprint MenuItem component. We also override the onClick\nmethod to make it behave like a dash Link rather than a regular URL.\n@param props\n@returns {*}\n@constructor",
    "displayName": "MenuItem",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this menu item should appear with an active state."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this menu item is non-interactive. Enabling this prop will ignore href, tabIndex, and mouse event handlers (in particular click, down, enter, leave)."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "labelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the right-aligned label wrapper element."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text should be allowed to wrap to multiple lines. If false, text will be truncated with an ellipsis when it reaches max-width."
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Props to spread to Popover. Note that content and minimal cannot be changed and usePortal defaults to false so all submenus will live in the same container."
      },
      "shouldDismissPopover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether an enabled item without a submenu should automatically close its parent popover when clicked."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the MenuItem."
      },
      "textClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the text wrapper element."
      },
      "preserveSearchString": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to preserve search string on href update",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/MultiSelect.react.js": {
    "description": "@param props\n@returns {*}\n@constructor",
    "displayName": "MultiSelect",
    "methods": [
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTagRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_tag",
            "type": null
          },
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getSelectedItemIndex",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isItemSelected",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItems",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "itemsToSelect",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "deselectItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Items to choose from"
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The selected item",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the list can be filtered",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use minimal popover style",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button icon"
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional props to define the popover behaviour"
      },
      "selectedItems": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input placeholder text. Shorthand for tagInputProps.placeholder.",
        "defaultValue": {
          "value": "\"Search...\"",
          "computed": false
        }
      },
      "checked": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Navbar.react.js": {
    "description": "",
    "displayName": "Navbar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "fixedToTop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this navbar should be fixed to the top of the viewport (using CSS position: fixed).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/NavbarDivider.react.js": {
    "description": "",
    "displayName": "NavbarDivider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      }
    }
  },
  "src/lib/components/NavbarGroup.react.js": {
    "description": "",
    "displayName": "NavbarGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The side of the navbar on which the group should appear. The Alignment enum provides constants for these values.\nOne of (`left`, `center`, `right`)",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/NavbarHeading.react.js": {
    "description": "",
    "displayName": "NavbarHeading",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      }
    }
  },
  "src/lib/components/Omnibar.react.js": {
    "description": "Wrapper around the blueprint Omnibar component.\n@param props\n@returns {*}\n@constructor",
    "displayName": "Omnibar",
    "methods": [
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          },
          {
            "name": "{ handleClick, modifiers, _query }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filterItem",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value from dropdown"
      },
      "items": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set of items to search"
      },
      "query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Query string"
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Keyboard shortcut to show omnibar",
        "defaultValue": {
          "value": "\"shift + s\"",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label to show on open button (also triggers display of button)"
      }
    }
  },
  "src/lib/components/OmnibarAsync.react.js": {
    "description": "Wrapper around the blueprint Omnibar component. The searching is done server-side here and relies on\nthe dash response to return results that can be rendered.\n@param props\n@returns {*}\n@constructor",
    "displayName": "OmnibarAsync",
    "methods": [
      {
        "name": "handleQueryChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          },
          {
            "name": "{ handleClick, modifiers, _query }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filterItem",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value from dropdown"
      },
      "items": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set of items to search"
      },
      "query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Query string"
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Keyboard shortcut to show omnibar",
        "defaultValue": {
          "value": "\"shift + s\"",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label to show on open button (also triggers display of button)"
      }
    }
  },
  "src/lib/components/Popover.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "boundary": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "boundary",
        "defaultValue": {
          "value": "\"scrollParent\"",
          "computed": false
        }
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "150",
          "computed": false
        }
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "PopoverInteractionKind.CLICK",
          "computed": true
        }
      },
      "modifiers": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "openOnTargetFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"auto\"",
          "computed": false
        }
      },
      "targetTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrapperTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ProgressBar.react.js": {
    "description": "",
    "displayName": "ProgressBar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should animate.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element.\n\"none\"\n        | \"primary\"\n        | \"success\"\n        | \"warning\"\n        | \"danger\""
      },
      "stripes": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should be striped.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A value between 0 and 1 (inclusive) representing how far along the operation is. Values below 0 or above 1 will be interpreted as 0 or 1, respectively. Omitting this prop will result in an \"indeterminate\" progress meter that fills the entire bar."
      }
    }
  },
  "src/lib/components/ResizeSensor.react.js": {
    "description": "Wrapper around the blueprint ResizeSensor component. Resize events are fired each time the child div\nresizes, with a custom debounce timeout to ensure we aren't overloaded with events.\n@param props\n@returns {*}\n@constructor",
    "displayName": "ResizeSensor",
    "methods": [
      {
        "name": "onResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "entries",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "observeParents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to observe parent sizes",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "debounceTimer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "How long to debounce before firing an event. Useful for situations\nwhere dynamic resizing would cause a lot of events to fire.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The current size of the observed e.g.\n{'x': 0, 'y': 0, 'width': 884, 'height': 17.265625, 'top': 0,\n 'right': 884, 'bottom': 17.265625, 'left': 0}\nTODO use a proper PropType"
      }
    }
  },
  "src/lib/components/Select.react.js": {
    "description": "@param props\n@returns {*}\n@constructor",
    "displayName": "Select",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selected",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Items to choose from"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected item"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the list can be filtered",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use minimal popover style",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button icon"
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional props to define the popover behaviour"
      },
      "checked": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Slider.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Slider",
    "methods": [
      {
        "name": "handleRelease",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the slider is non-interactive.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "initialValue": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial value of the slider. This determines the other end of the track fill: from initialValue to value."
      },
      "labelPrecision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of decimal places to use when rendering label value. Default value is the number of decimals used in the stepSize prop. This prop has no effect if you supply a custom labelRenderer callback."
      },
      "labelType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Instructions for rendering the label. Options will be clock, date, datetime, number, percentage, etc.",
        "defaultValue": {
          "value": "'number'",
          "computed": false
        }
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value of the slider"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value of the slider"
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive values; amount by which the handle moves. Must be greater than zero"
      },
      "showTrackFill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a solid bar should be rendered on the track between current and initial values, or between handles for RangeSlider"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value of slider",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "releaseValue": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value of slider on release of handle. This will only fire callbacks when the \nslider has been released, which is probably desirable in most instances for \nserver-side callbacks",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the slider in a vertical orientation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Switch.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button\n@param props\n@returns {*}\n@constructor",
    "displayName": "Switch",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/Tab.react.js": {
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "panelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/Tabs.react.js": {
    "description": "",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "getInitialSelectedTabId",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getKeyCodeDirection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTabChildrenProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTabChildren",
        "docblock": "Filters children to only `<Tab>`s",
        "modifiers": [],
        "params": [
          {
            "name": "props"
          }
        ],
        "returns": null,
        "description": "Filters children to only `<Tab>`s"
      },
      {
        "name": "getTabElements",
        "docblock": "Queries root HTML element for all tabs with optional filter selector",
        "modifiers": [],
        "params": [
          {
            "name": "subselector"
          }
        ],
        "returns": null,
        "description": "Queries root HTML element for all tabs with optional filter selector"
      },
      {
        "name": "moveSelectionIndicator",
        "docblock": "Calculate the new height, width, and position of the tab indicator.\nStore the CSS values so the transition animation can start.",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Calculate the new height, width, and position of the tab indicator.\nStore the CSS values so the transition animation can start."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "setProps": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "defaultSelectedTabId": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.string"
        },
        "required": false,
        "description": ""
      },
      "renderActiveTabPanelOnly": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animate": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "vertical": {
        "defaultValue": {
          "value": "false",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Toaster.react.js": {
    "description": "",
    "displayName": "Toaster",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "href",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "toasterId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Unique identifier for a toaster. All Toasters with the same id\nwill render to the same underlying toaster. There is no guarantee\nwhich will instantiate first, so they should all be passed the\nsame Toaster props",
        "defaultValue": {
          "value": "'toaster'",
          "computed": false
        }
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a toast should acquire application focus when it first opens.\nThis is disabled by default so that toasts do not interrupt the user's\nflow. Note that enforceFocus is always disabled for Toasters.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Toast position",
        "defaultValue": {
          "value": "Position.TOP_RIGHT",
          "computed": true
        }
      },
      "canEscapeKeyClear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should clear all active toasts.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "toasts": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Toasts to display",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Tree.react.js": {
    "description": "",
    "displayName": "Tree",
    "methods": [
      {
        "name": "handleNodeClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          },
          {
            "name": "_nodePath",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "forEachNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodes",
            "type": null
          },
          {
            "name": "callback",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNodeExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNodeCollapse",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "nodes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Set of nodes to be rendered"
      },
      "selectedNode": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Currently selected node"
      }
    }
  }
}
