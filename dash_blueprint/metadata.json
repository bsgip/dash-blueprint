{
  "src/lib/components/Breadcrumbs.react.js": {
    "description": "Breadcrumbs identify the path to the current resource in an application.",
    "displayName": "Breadcrumbs",
    "methods": [
      {
        "name": "onBreadcrumbClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "href",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderBreadcrumb",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{text, ...restProps}",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "collapseFrom": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which direction the breadcrumbs should collapse from: start or end."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "All breadcrumbs to display. Breadcrumbs that do not fit in the container \nwill be rendered in an overflow menu instead.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "minVisibleItems": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number of visible breadcrumbs that should never collapse into the \noverflow menu, regardless of DOM dimensions."
      },
      "overflowListProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Props to spread to OverflowList. Note that items, overflowRenderer, \nand visibleItemRenderer cannot be changed."
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Props to spread to the Popover showing the overflow menu."
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "This is pretty much a straight copy/paste from the dash html component button,\nexcept we render a blueprint button. If you don't care about styling, you should probably\nuse the dash version.\n\nTODO - it would be useful to have a href prop here, where clicking a button routes to\na different URL\n@param props\n@returns {*}\n@constructor",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display in an active state. This is equivalent to setting className={Classes.ACTIVE}."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered within the button. Passing \"left\" or \"right\" will align the button text to that side and push icon and rightIcon to either edge. Passing \"center\" will center the text and icons together.\nChoice of (`left`, `right`, `center`)"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use minimal styles."
      },
      "rightIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the text."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use small styles."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "window location to set on click"
      }
    }
  },
  "src/lib/components/ButtonGroup.react.js": {
    "description": "Button groups arrange multiple buttons in a horizontal or vertical group.",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "A card is a bounded unit of UI content with a solid background color.",
    "displayName": "Card",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher the elevation, the higher the drop shadow. At elevation 0, no drop shadow is applied."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the card should respond to user interactions. If set to true, hovering over the card will increase the card's elevation and change the mouse cursor to a pointer.\n\nRecommended when onClick is also defined."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "window location to set on click"
      }
    }
  },
  "src/lib/components/Checkbox.react.js": {
    "description": "A checkbox allows the user to toggle between checked, unchecked, \nand (rarely) indeterminate states.",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/CheckboxGroup.react.js": {
    "description": "This is a wrapper around a set of BlueprintJS checkbox and FormGroup components\nto give functionality similar to the standard Dash checkbox component.\n\nThe BlueprintJS checkbox treats every checkbox individually, whereas this groups\nthem into selection items",
    "displayName": "CheckboxGroup",
    "methods": [
      {
        "name": "handleChildChange",
        "docblock": "Similar to a FormGroup, but this wraps up a set of checkboxes into a similar form\nto the standard dash Checkbox\n\n@param {string} key \n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "Similar to a FormGroup, but this wraps up a set of checkboxes into a similar form\nto the standard dash Checkbox"
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Label for the form group",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      }
    }
  },
  "src/lib/components/Collapse.react.js": {
    "description": "The Collapse element shows and hides content with a built-in slide in/out animation. \nYou might use this to create a panel of settings for your application, \nwith sub-sections that can be expanded and collapsed.\n\nNOTE: This Dash component creates a Button element to handle the open/close function,\nand wraps the button and Collapse as a fragment",
    "displayName": "Collapse",
    "methods": [
      {
        "name": "handleShowHide",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show a minimal button",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display for show button"
      },
      "showIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for show button"
      },
      "hideText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display for hide button"
      },
      "hideIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for hide button"
      },
      "showRightIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for show button"
      },
      "hideRightIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for hide button"
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether content is shown initially",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepChildrenMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child components will remain mounted when the Collapse is closed. \nSetting to true may improve performance by avoiding re-mounting children.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The length of time the transition takes, in milliseconds. This must match the duration of the animation in CSS. \nOnly set this prop if you override Blueprint's default transitions with new transitions of a different length.",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "buttonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The button component to render use as the component that determines the\nCollapse state.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The className to use for the Collapse component"
      }
    }
  },
  "src/lib/components/CollapseCard.react.js": {
    "description": "A combination of Collapse and Card, this shows additional details when the card is clicked on.\n\nNote: because of the janky way we recreate the children, it currently does not show the \ntransition on Collapse open/close.",
    "displayName": "CollapseCard",
    "methods": [
      {
        "name": "handleShowHide",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on."
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently."
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher the elevation, the higher the drop shadow. At elevation 0, no drop shadow is applied."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the card should respond to user interactions. If set to true, hovering over the card will increase the card's elevation and change the mouse cursor to a pointer.\n\nRecommended when onClick is also defined."
      }
    }
  },
  "src/lib/components/CollapseCardList.react.js": {
    "description": "A component rendering a list of CollapseCard components. The parent list maintains\nthe open/close state of all CollapseCards, and so allows for updating without\ndestroying the state of the list.\n\nNote: to use this, the children object passed in must be a list of RawCollapse components.",
    "displayName": "CollapseCardList",
    "methods": [
      {
        "name": "selectCard",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "isOpen",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on."
      },
      "n_clicks_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently."
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher the elevation, the higher the drop shadow. At elevation 0, no drop shadow is applied."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the card should respond to user interactions. If set to true, hovering over the card will increase the card's elevation and change the mouse cursor to a pointer.\n\nRecommended when onClick is also defined."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "window location to set on click"
      },
      "selected": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The selected (and non-collapsed) card key",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "opened": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The last opened card key"
      }
    }
  },
  "src/lib/components/DateInput.react.js": {
    "description": "The DateInput component is an input group that shows a DatePicker in a Popover on focus.\nUse it in forms where the user must enter a date.\n@param props\n@returns {*}\n@constructor",
    "displayName": "DateInput",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "date",
            "type": null
          },
          {
            "name": "hasUserManuallySelectedDate",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "'Today'",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/DatePicker.react.js": {
    "description": "A DatePicker shows a monthly calendar and allows the user to choose a single date.\n\nDatePicker is built on top of the react-day-picker library.",
    "displayName": "DatePicker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "date",
            "type": null
          },
          {
            "name": "hasUserManuallySelectedDate",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "'Today'",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/DateRangeInput.react.js": {
    "description": "The DateRangeInput component is a control group composed of two input groups. It shows a\nDateRangePicker in a Popover on focus.\n\nUse this component in forms where the user must enter a date range.",
    "displayName": "DateRangeInput",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dateRange",
            "type": null
          },
          {
            "name": "hasUserManuallySelectedDate",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a range of dates are displayed or not. If true, preset shortcuts will be displayed. If false, no shortcuts will be displayed. If an array is provided, the custom shortcuts will be displayed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "start_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected start date"
      },
      "end_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected end date"
      },
      "date_range": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The selected date range"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Possible values are \"minute\"|\"second\"|\"millisecond\"",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "'Today'",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/DateRangePicker.react.js": {
    "description": "A DateRangePicker shows two sequential month calendars and lets the user select a single range of days.",
    "displayName": "DateRangePicker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dateRange",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a range of dates are displayed or not. If true, preset shortcuts will be displayed. If false, no shortcuts will be displayed. If an array is provided, the custom shortcuts will be displayed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "start_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "end_date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default start date value"
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected date"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value (or providing timePickerProps) shows a TimePicker below the calendar. Time is preserved across date changes.\n\n     This is shorthand for timePickerProps.precision and is a quick way to enable time selection.\n\n     Inherited from IDatePickerBaseProps.timePrecision",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar.",
        "defaultValue": {
          "value": "\"Today\"",
          "computed": false
        }
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "canClearSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      }
    }
  },
  "src/lib/components/Dialog.react.js": {
    "description": "Blueprint Dialog box for Dash\n\nhttps://blueprintjs.com/docs/#core/components/dialog.dialog\n\n@param props\n@returns {*}\n@constructor",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should acquire application focus when it first opens.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "backdropClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class names to apply to backdrop element."
      },
      "backdropProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "HTML props for the backdrop element."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "canOutsideClickClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether clicking outside the overlay element (either on backdrop when present or on document) should invoke onClose.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to focus an element outside the overlay and this prop is enabled, then the overlay will immediately bring focus back to itself. If you are nesting overlay components, either disable this prop on the \"outermost\" overlays or mark the nested ones usePortal={false}.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to render in the dialog's header. Note that the header will only be rendered if title is provided."
      },
      "isCloseButtonShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the close button in the dialog's header. Note that the header will only be rendered if title is provided.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the overlay and its children. This prop is required because the component is controlled.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the DOM when the overlay is opened for the first time; otherwise this happens when the component mounts. Lazy mounting provides noticeable performance improvements if you have lots of overlays at once, such as on each row of a table.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "shouldReturnFocusOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the application should return focus to the last active element in the document after this overlay closes.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the dialog."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Title of the dialog. If provided, an element with Classes.DIALOG_HEADER will be rendered inside the dialog before any children elements."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition to know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you override Blueprint's default transitions with new transitions of a different length.",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "transitionName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the transition for internal CSSTransition. Providing your own name here will require defining new CSS transition properties."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should be wrapped in a Portal, which renders its contents in a new element attached to portalContainer prop.\n\nThis prop essentially determines which element is covered by the backdrop: if false, then only its parent is covered; otherwise, the entire page is covered (because the parent of the Portal is the <body> itself).\n\nSet this prop to false on nested overlays (such as Dialog or Popover) to ensure that they are rendered above their parents.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "Divider visually separate contents with a thin line and margin on all sides.\n\nDividers work best in flex layouts where they will adapt to orientation without additional \nstyles. Otherwise, a divider will appear as a full-width 1px-high block element.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for element.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Drawer.react.js": {
    "description": "",
    "displayName": "Drawer",
    "methods": [
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should acquire application focus when it first opens.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the overlay and its children. This prop is required because the component is controlled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/EditableText.react.js": {
    "description": "EditableText appears as normal UI text but transforms into a text input field when the user focuses it.\n\nThe text input inherits all font styling from its ancestors, making for a seamless transition\n between reading and editing text.\n\nYou might use this component for inline renaming, or for an editable multiline description.\nYou should not use EditableText when a static always-editable <input> or <textarea> tag would suffice.",
    "displayName": "EditableText",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleConfirm",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "confirmOnEnterKey": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and in multiline mode, the enter key will trigger onConfirm and mod+enter will insert a newline. If false, the key bindings are inverted such that enter adds a newline.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "defaultValue": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Default text value of uncontrolled input."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text can be edited.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element.\n= \"none\"\n| \"primary\"\n| \"success\"\n| \"warning\"\n| \"danger\""
      },
      "isEditing": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component is currently being edited."
      },
      "maxLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of characters allowed. Unlimited by default."
      },
      "maxLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of lines before scrolling begins, when multiline."
      },
      "minLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum number of lines (essentially minimum height), when multiline.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "minWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum width in pixels of the input, when not multiline."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component supports multiple lines of text. This prop should not be changed during the component's lifetime.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text when there is no value.",
        "defaultValue": {
          "value": "\"Click to Edit\"",
          "computed": false
        }
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hether the entire text field should be selected on focus. If false, the cursor is placed at the end of the text. This prop is ignored on inputs with type other then text, search, url, tel and password. See https://html.spec.whatwg.org/multipage/input.html#do-not-apply for details.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The type of input that should be shown, when not multiline."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text value of controlled input."
      },
      "confirmedValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text value when input has been confirmed."
      }
    }
  },
  "src/lib/components/Form.react.js": {
    "description": "Custom component that is a collection of FormGroups with submit button\nthat may have custom validation to enable\n\nhttps://blueprintjs.com/docs/#core/components/dialog.dialog\n\n@param props\n@returns {*}\n@constructor",
    "displayName": "Form",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      }
    }
  },
  "src/lib/components/FormGroup.react.js": {
    "description": "Form groups support more complex form controls than simple labels,\nsuch as control groups or NumericInput.\nThey also support additional helper text to aid with user navigation.",
    "displayName": "FormGroup",
    "methods": [
      {
        "name": "initState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "data",
            "type": null
          },
          {
            "name": "valid",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChildChange",
        "docblock": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData\nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested.\n\n@param {string} key\n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            },
            "optional": false
          },
          {
            "name": "valid"
          }
        ],
        "returns": null,
        "description": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData\nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested."
      },
      {
        "name": "insertSetParentProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label of this form group."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Collected values of all children of this form group.\nThis will usually be an object, unless `collapseChildData` is `true`,\nin which case a single value will be passed in.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "childValidation": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Collected values of all children of this form group.\nThis will usually be an object, unless `collapseChildData` is `true`,\nin which case a single value will be passed in.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "contentClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the Classes.FORM_CONTENT element that contains children."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether form group should appear as non-interactive. Remember that input elements must be disabled separately."
      },
      "helperText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional helper text. The given content will be wrapped in Classes.FORM_HELPER_TEXT and displayed beneath children. Helper text color is determined by the intent."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render the label and children on a single line."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "labelFor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "id attribute of the labelable form element that this FormGroup controls, used as <label for> attribute."
      },
      "labelInfo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional secondary text that appears after the label."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "collapseChildData": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, this component assumes there is only one child component that updates\ndata, and collapses `childData` from an object to a single value.\nThis can be useful when working with lots of form groups to avoid having\nto extract single values from objects",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/H1.react.js": {
    "description": "",
    "displayName": "H1",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H2.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H3.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H4.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H5.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/H6.react.js": {
    "description": "",
    "displayName": "elem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/HTMLTable.react.js": {
    "description": "This component provides Blueprint styling to native HTML tables.\n\nIt also includes additional functionality for searching, ordering and pagination of\ndata in the table.\n\nIMPORTANT: When creating rows, you MUST use the BlueprintJS Tr component if you\nwant selection to show properly, and use css to modify rows with className 'selected'\n@param props\n@returns {*}\n@constructor",
    "displayName": "HTMLTable",
    "methods": [
      {
        "name": "renderBody",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables borders between rows and cells."
      },
      "condensed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use small, condensed appearance."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables hover styles on row."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use small, condensed appearance for this element and all child elements."
      },
      "striped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use an alternate background color on odd rows."
      },
      "row_click": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key for the clicked row"
      },
      "sort_column": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Column to sort values on"
      },
      "sort_direction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sort direction (asc or desc)",
        "defaultValue": {
          "value": "'asc'",
          "computed": false
        }
      },
      "filter_by": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Filtering strings",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "filter_columns": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Column numbers that may be filtered",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "sort_columns": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Columns that can be sorted on",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "filter_strings": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Strings to filter columns by",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "page_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Page size (in rows)",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "current_page": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Current page to show",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "show_more_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of rows to increase/decrease page size by\n(for use in simple show more mode)",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "show_more_less": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show simple more/less buttons to adjust page size"
      },
      "selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether row selection is enabled"
      },
      "selection": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Currently selected rows",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Hotkey.react.js": {
    "description": "Hotkeys enable you to create interactions based on user keyboard events.\n\nWhen a Hotkey is enabled, a hotkey interaction will trigger an n_presses and n_presses_timestamp\nupdate",
    "displayName": "Hotkey",
    "methods": [
      {
        "name": "fireEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "label",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "n_presses": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this shortcut has been fired.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_presses_timestamp": {
        "type": {
          "name": "custom",
          "raw": "PropTypes.integer"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_presses changed. This can be used to tell\nwhich event was fired most recently.",
        "defaultValue": {
          "value": "-1",
          "computed": false
        }
      },
      "hotkey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Signifies the last hotkey that was pressed"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Hotkey combination string, such as \"space\" or \"cmd+n\"."
      },
      "globalTrigger": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If false, the hotkey is active only when the target is focused. \nIf true, the hotkey can be triggered regardless of what component is focused.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for component",
        "defaultValue": {
          "value": "\"hotkey\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Icon.react.js": {
    "description": "",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of icon. This is used as the fill attribute on the <svg> image so it will override any CSS color property, including that set by intent. If this prop is omitted, icon color is inherited from surrounding text."
      },
      "htmlTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "String for the title attribute on the rendered element, which will appear on hover as a native browser tooltip."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon, or an icon element, to render. This prop is required because it determines the content of the component, but it can be explicitly set to falsy values to render nothing.\n\nIf null or undefined or false, this component will render nothing.\n\nIf given an IconName (a string literal union of all icon names), that icon will be rendered as an <svg> with <path> tags. Unknown strings will render a blank icon to occupy space.\n\nIf given a JSX.Element, that element will be rendered and all other props on this component are ignored. This type is supported to simplify icon support in other Blueprint components. As a consumer, you should avoid using <Icon icon={<Element />} directly; simply render <Element /> instead."
      },
      "iconSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "numberIcon.SIZE_STANDARD = 16\n\nSize of the icon, in pixels. Blueprint contains 16px and 20px SVG icon images, and chooses the appropriate resolution based on this prop."
      },
      "style": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS style properties."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag to use for the rendered element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Description string. This string does not appear in normal browsers, but it increases accessibility. For instance, screen readers will use it for aural feedback. By default, this is set to the icon's name. Pass an explicit falsy value to disable."
      }
    }
  },
  "src/lib/components/InputGroup.react.js": {
    "description": "An input group allows you to add icons and buttons within a text input to expand its functionality. \nFor example, you might use an input group to build a visibility toggle for a password field.\n\nNote: this implementation only allows for icons to be used, and provides no interactive \nfunctionality",
    "displayName": "InputGroup",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load.",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting Classes.LARGE via className on the parent control group and on the child input group."
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render on the left side of input."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The placeholder text in the absence of any value."
      },
      "round": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input (and any buttons) should appear with rounded caps."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input should use small styles."
      }
    }
  },
  "src/lib/components/Link.react.js": {
    "description": "Link allows you to create a clickable link within a multi-page app.\n\nFor links with destinations outside the current app, `html.A` is a better\ncomponent to use.",
    "displayName": "Link",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The URL of a linked resource."
      },
      "refresh": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether or not the page will refresh when the link is clicked",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      }
    }
  },
  "src/lib/components/ListGroup.react.js": {
    "description": "A ListGroup presents a set of repeated options, with the option to add\nor remove rows from the set.",
    "displayName": "ListGroup",
    "methods": [
      {
        "name": "recalcList",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nRows",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "initState",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "data",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChildChange",
        "docblock": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested.\n\n@param {string} key \n@param {object} data",
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "description": null,
            "type": {
              "name": "string"
            },
            "optional": false
          },
          {
            "name": "data",
            "description": null,
            "type": {
              "name": "object"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "For child components that are aware, this function can be used to update the\nFormGroup with property changes. This means that we can just use the childData \nproperty for the FormGroup for a callback rather than checking each nested component.\n\nOnly dash-blueprint objects will be supported. This is very much untested."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      },
      "childData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Child component data"
      },
      "listData": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "List of child data for currently visible rows"
      },
      "nRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether to show a limited number of children",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "minRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Min number of rows to show",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "maxRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max number of rows to show",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Menu.react.js": {
    "description": "Menus display lists of interactive items.\n@param {*} props",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      }
    }
  },
  "src/lib/components/MenuDivider.react.js": {
    "description": "Use MenuDivider to separate menu sections. Optionally, add a title to the divider.\n@param {*} props",
    "displayName": "MenuDivider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional header title."
      }
    }
  },
  "src/lib/components/MenuItem.react.js": {
    "description": "A MenuItem is a single interactive item in a Menu.\n\nThis component renders an <li> containing an <a>. Make the MenuItem interactive by providing the href, target, and onClick props as necessary.\n\nCreate submenus by nesting MenuItems inside each other as children. Use the required text prop for MenuItem content.\n\nWe also override the onClick\nmethod to make it behave like a dash Link rather than a regular URL.\n@param props\n@returns {*}\n@constructor",
    "displayName": "MenuItem",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display"
      },
      "iconSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Size of the icon"
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this menu item should appear with an active state."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this menu item is non-interactive. Enabling this prop will ignore href, tabIndex, and mouse event handlers (in particular click, down, enter, leave)."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "labelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the right-aligned label wrapper element."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text should be allowed to wrap to multiple lines. If false, text will be truncated with an ellipsis when it reaches max-width."
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Props to spread to Popover. Note that content and minimal cannot be changed and usePortal defaults to false so all submenus will live in the same container."
      },
      "shouldDismissPopover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether an enabled item without a submenu should automatically close its parent popover when clicked."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the MenuItem."
      },
      "textClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the text wrapper element."
      },
      "preserveSearchString": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to preserve search string on href update. When true, a link from\n/foo?bar= will redirect to /new-url?bar=",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/MultiSelect.react.js": {
    "description": "Use MultiSelect<T> for choosing multiple items in a list.\nThe component renders a TagInput wrapped in a Popover.",
    "displayName": "MultiSelect",
    "methods": [
      {
        "name": "handleTagRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_tag",
            "type": null
          },
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getSelectedItemIndex",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isItemSelected",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectItems",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "itemsToSelect",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "deselectItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClear",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderTag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Items to choose from"
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The selected item",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the list can be filtered",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use minimal popover style",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button icon"
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional props to define the popover behaviour"
      },
      "selectedItems": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Returns selected items",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input placeholder text. Shorthand for tagInputProps.placeholder.",
        "defaultValue": {
          "value": "'Search...'",
          "computed": false
        }
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/Navbar.react.js": {
    "description": "Navbars present useful navigation controls at the top of an application.\n@param {*} props",
    "displayName": "Navbar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "fixedToTop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this navbar should be fixed to the top of the viewport (using CSS position: fixed).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/NavbarDivider.react.js": {
    "description": "",
    "displayName": "NavbarDivider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      }
    }
  },
  "src/lib/components/NavbarGroup.react.js": {
    "description": "",
    "displayName": "NavbarGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The side of the navbar on which the group should appear. The Alignment enum provides constants for these values.\nOne of (`left`, `center`, `right`)",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/NavbarHeading.react.js": {
    "description": "",
    "displayName": "NavbarHeading",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      }
    }
  },
  "src/lib/components/NonIdealState.react.js": {
    "description": "Non-ideal UI states inform the user that some content is unavailable. There are several types of non-ideal states, including:\n\nEmpty state: a container has just been created and has no data in it yet, or a container's contents have been intentionally removed.\n\nLoading state: a container is awaiting data. A good practice is to show a spinner for this state, with optional explanatory text below the spinner.\n\nError state: something went wrong (for instance, 404 and 500 HTTP errors). In this case, a good practice is to add a call to action directing the user what to do next.\n@param {*} props",
    "displayName": "NonIdealState",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "description": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A longer description of the non-ideal state. A string or \nnumber value will be wrapped in a <div> to preserve margins."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of a Blueprint icon or a JSX Element (such as <Spinner/>) to render above the title."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The title of the non-ideal state."
      }
    }
  },
  "src/lib/components/NumericInput.react.js": {
    "description": "The NumericInput component provides controls for easily inputting, incrementing, and decrementing numeric values.",
    "displayName": "NumericInput",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          },
          {
            "name": "stringValue",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "allowNumericCharactersOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to allow only floating-point number characters in the field, mimicking the native input[type=\"number\"]."
      },
      "buttonPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "\"left\" | \"right\" | \"none\"Position.RIGHT\nThe position of the buttons with respect to the input field."
      },
      "clampValueOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the value should be clamped to [min, max] on blur. The value will be clamped to each bound only if the bound is defined. Note that native input[type=\"number\"] controls do NOT clamp on blur."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input is non-interactive. Note that rightElement must be disabled separately; this prop will not affect it."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the numeric input should take up the full width of its container."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting Classes.LARGE via className on the parent control group and on the child input group."
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render on the left side of input."
      },
      "shiftSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when shift is held. Pass explicit null value to disable this interaction."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum value of the input."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum value of the input."
      },
      "minorStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when alt is held. Pass explicit null value to disable this interaction."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The placeholder text in the absence of any value."
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on focus."
      },
      "selectAllOnIncrement": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on increment."
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when no modifier keys are held."
      },
      "stringValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value as a number."
      }
    }
  },
  "src/lib/components/Omnibar.react.js": {
    "description": "Omnibar<T> is a macOS Spotlight-style typeahead component composing Overlay and QueryList<T>. \nUsage is similar to Select<T>: provide your items and a predicate to customize the \nfiltering algorithm. The component is fully controlled via the isOpen prop, \nwhich means you can decide exactly how to trigger the component.",
    "displayName": "Omnibar",
    "methods": [
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          },
          {
            "name": "{ handleClick, modifiers, _query }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filterItem",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value from dropdown"
      },
      "items": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set of items to search"
      },
      "query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Query string"
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Keyboard shortcut to show omnibar",
        "defaultValue": {
          "value": "\"shift + s\"",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label to show on open button (also triggers display of button)"
      }
    }
  },
  "src/lib/components/OmnibarAsync.react.js": {
    "description": "Wrapper around the blueprint Omnibar component. The searching is done server-side here and relies on\nthe dash response to return results that can be rendered.\n@param props\n@returns {*}\n@constructor",
    "displayName": "OmnibarAsync",
    "methods": [
      {
        "name": "handleQueryChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          },
          {
            "name": "{ handleClick, modifiers, _query }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filterItem",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "query",
            "type": null
          },
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleItemSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderHotkeys",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value from dropdown"
      },
      "items": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set of items to search",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "query": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Query string"
      },
      "combo": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Keyboard shortcut to show omnibar",
        "defaultValue": {
          "value": "\"shift + s\"",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label to show on open button (also triggers display of button)"
      }
    }
  },
  "src/lib/components/PanelStack.react.js": {
    "description": "PanelStack manages a stack of panels and displays only the topmost panel.\n\nEach panel appears with a header containing a \"back\" button to return to the previous panel. \nThe bottom-most initialPanel cannot be closed or removed from the stack. Panels use CSSTransition for seamless transitions.\n\nNote: currently not functional",
    "displayName": "PanelStack",
    "methods": [
      {
        "name": "nextPanel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "items",
            "type": null
          },
          {
            "name": "title",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Items to choose from"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the list can be filtered",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use minimal popover style",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button icon"
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional props to define the popover behaviour"
      }
    }
  },
  "src/lib/components/Popover.react.js": {
    "description": "Popovers display floating content next to a target element.\n\nPopover is built on top of the Popper.js library. Popper.js is a small (~6kb) \nlibrary that offers a powerful, customizable positioning engine and operates at blazing speed (~60fps).\n@param {*} props",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Popover content"
      },
      "boundary": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "boundary",
        "defaultValue": {
          "value": "\"scrollParent\"",
          "computed": false
        }
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "150",
          "computed": false
        }
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "PopoverInteractionKind.CLICK",
          "computed": true
        }
      },
      "modifiers": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "openOnTargetFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"auto\"",
          "computed": false
        }
      },
      "targetTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "wrapperTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"span\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ProgressBar.react.js": {
    "description": "Progress bars indicate progress towards the completion of a task or an indeterminate loading state.\n@param {*} props",
    "displayName": "ProgressBar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should animate.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element.\n\"none\"\n        | \"primary\"\n        | \"success\"\n        | \"warning\"\n        | \"danger\""
      },
      "stripes": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should be striped.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A value between 0 and 1 (inclusive) representing how far along the operation is. Values below 0 or above 1 will be interpreted as 0 or 1, respectively. Omitting this prop will result in an \"indeterminate\" progress meter that fills the entire bar."
      }
    }
  },
  "src/lib/components/RadioGroup.react.js": {
    "description": "A radio button typically represents a single option in a mutually exclusive list\n(where only one item can be selected at a time).\nBlueprint provides Radio and RadioGroup components for these two layers.",
    "displayName": "RadioGroup",
    "methods": [
      {
        "name": "handleRadioChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Label for the form group"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the radio buttons are to be displayed inline horizontally."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the group, used to link radio buttons together in HTML. If omitted, a unique name will be generated internally."
      },
      "options": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of options to render in the group. This prop is mutually exclusive with children: either provide an array of IOptionProps objects or provide <Radio> children elements."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/RawCollapse.react.js": {
    "description": "This component renders the collapsible portion of a CollapseCard. When not rendered\nas a direct child of a CollapseCard, this component is useless as there is no way\nto trigger it to open.",
    "displayName": "Collapse",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show a minimal button",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display for show button"
      },
      "showIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for show button",
        "defaultValue": {
          "value": "\"small-plus\"",
          "computed": false
        }
      },
      "hideText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display for hide button"
      },
      "hideIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Icon to display for hide button",
        "defaultValue": {
          "value": "\"small-minus\"",
          "computed": false
        }
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether content is shown initially",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "keepChildrenMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child components will remain mounted when the Collapse is closed. \nSetting to true may improve performance by avoiding re-mounting children.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The length of time the transition takes, in milliseconds. This must match the duration of the animation in CSS. \nOnly set this prop if you override Blueprint's default transitions with new transitions of a different length.",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      }
    }
  },
  "src/lib/components/ResizeSensor.react.js": {
    "description": "ResizeSensor is a component that provides a \"resize\" event for its single DOM element child. It is a thin wrapper around ResizeObserver to provide React bindings.\n\n Resize events are fired each time the child div\nresizes, with a custom debounce timeout to ensure we aren't overloaded with events.\n\nNote: This was more useful when Dash components were not size-aware, and should be used sparingly\n@param props\n@returns {*}\n@constructor",
    "displayName": "ResizeSensor",
    "methods": [
      {
        "name": "onResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "entries",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "observeParents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to observe parent sizes",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "debounceTimer": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "How long to debounce before firing an event. Useful for situations\nwhere dynamic resizing would cause a lot of events to fire.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The current size of the observed e.g.\n{'x': 0, 'y': 0, 'width': 884, 'height': 17.265625, 'top': 0,\n 'right': 884, 'bottom': 17.265625, 'left': 0}\nTODO use a proper PropType"
      }
    }
  },
  "src/lib/components/Select.react.js": {
    "description": "Use `Select` for choosing one item from a list.",
    "displayName": "Select",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selected",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Items to choose from"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected item"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The selected item label"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu is disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container.\nThis overrides popoverProps.fill. You also have to ensure that the\nchild component has fill set to true or is styled appropriately."
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the list can be filtered",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use minimal popover style",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button icon"
      },
      "popoverProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Additional props to define the popover behaviour"
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/Slider.react.js": {
    "description": "A slider is a numeric input for choosing numbers between lower and upper bounds. It also has a labeled axis that supports custom formatting.\n\nTo adjust a slider value, the user clicks and drags a handle or clicks the axis to move the nearest handle to that spot. Users can also use arrow keys on the keyboard to adjust individual handles.\n\nUse Slider for choosing a single value, RangeSlider for choosing two values, and MultiSlider for more advanced use cases.\n\nUse Slider to choose a single value on a number line. It is a controlled component, so the value prop determines its current appearance. Provide an onChange handler to receive updates and an onRelease handler to determine when the user has stopped interacting with the slider.",
    "displayName": "Slider",
    "methods": [
      {
        "name": "handleRelease",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "updateKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "key to use when updating parent component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the slider is non-interactive.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "initialValue": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial value of the slider. This determines the other end of the track fill: from initialValue to value."
      },
      "labelPrecision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of decimal places to use when rendering label value. Default value is the number of decimals used in the stepSize prop. This prop has no effect if you supply a custom labelRenderer callback."
      },
      "labelType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Instructions for rendering the label. Options will be clock, date, datetime, number, percentage, etc.",
        "defaultValue": {
          "value": "'number'",
          "computed": false
        }
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero"
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value of the slider"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value of the slider"
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive values; amount by which the handle moves. Must be greater than zero"
      },
      "showTrackFill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a solid bar should be rendered on the track between current and initial values, or between handles for RangeSlider"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value of slider",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "releaseValue": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value of slider on release of handle. This will only fire callbacks when the \nslider has been released, which is probably desirable in most instances for \nserver-side callbacks",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the slider in a vertical orientation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "labelRenderer": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render labels",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Spinner.react.js": {
    "description": "Spinners indicate progress in a circular fashion. They're great for ongoing operations and can also represent known progress.\n@param {*} props",
    "displayName": "Spinner",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "numberSpinner.SIZE_STANDARD = 50\n\nWidth and height of the spinner in pixels. The size cannot be less than 10px.\n\nConstants are available for common sizes:\nSpinner.SIZE_SMALL = 20px\nSpinner.SIZE_STANDARD = 50px\nSpinner.SIZE_LARGE = 100px"
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag for the two wrapper elements. If rendering a <Spinner> inside an <svg>, change this to an SVG element like \"g\"."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A value between 0 and 1 (inclusive) representing how far along the operation is. Values below 0 or above 1 will be interpreted as 0 or 1 respectively. Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely."
      }
    }
  },
  "src/lib/components/Switch.react.js": {
    "description": "A switch is simply an alternate appearance for a checkbox that simulates on/off instead of checked/unchecked.",
    "displayName": "Switch",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "An integer that represents the number of times\nthat this element has been clicked on.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "updateKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "key to use when updating parent component"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "autoFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The element should be automatically focused after the page loaded."
      },
      "disabled": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "form": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the form that is the owner of the element."
      },
      "formAction": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates the action of the element, overriding the action defined in the <form>."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the element. For example used by the server to identify the fields in form submits."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the type of the element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a default value which will be displayed in the element on page load."
      },
      "accessKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines a keyboard shortcut to activate or add focus to the element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "contentEditable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether the element's content is editable."
      },
      "contextMenu": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the ID of a <menu> element which will serve as the element's context menu."
      },
      "dir": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)"
      },
      "draggable": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines whether the element can be dragged."
      },
      "hidden": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Prevents rendering of given element, while keeping child elements, e.g. script elements, active."
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Defines the language used in the element."
      },
      "spellCheck": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Indicates whether spell checking is allowed for the element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Defines CSS styles which will override styles previously set."
      },
      "tabIndex": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overrides the browser's default tab order and follows the one specified instead."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to be displayed in a tooltip when hovering over the element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Button intent (primary/success/warning/danger/none)"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "required": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this input is required. Used in form validation",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "valid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determine whether the input is valid. Used in form validation"
      }
    }
  },
  "src/lib/components/Tab.react.js": {
    "description": "Tab is a minimal wrapper with no functionality of its own\u2014it is managed entirely by its parent Tabs wrapper. Tab title text can be set either via title prop or via React children (for more complex content).\n\nThe associated tab panel will be visible when the Tab is active. Omitting panel is supported and can be useful when you want the associated panel to appear elsewhere in the DOM (by rendering it yourself as needed).\n@param {*} props",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "panelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/lib/components/Tabs.react.js": {
    "description": "Tabs is the top-level component responsible for rendering the tab list and coordinating selection. It can be used in controlled mode by providing selectedTabId and onChange props, or in uncontrolled mode by optionally providing defaultSelectedTabId and onChange.\n\nChildren of the Tabs are rendered in order in the tab list, which is a flex container. Tab children are managed by the component; clicking one will change selection. Arbitrary other children are simply rendered in order; interactions are your responsibility.\n\nInsert a <Tabs.Expander /> between any two children to right-align all subsequent children (or bottom-align when vertical).",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "getInitialSelectedTabId",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getKeyCodeDirection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTabChildrenProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getTabChildren",
        "docblock": "Filters children to only `<Tab>`s",
        "modifiers": [],
        "params": [
          {
            "name": "props"
          }
        ],
        "returns": null,
        "description": "Filters children to only `<Tab>`s"
      },
      {
        "name": "getTabElements",
        "docblock": "Queries root HTML element for all tabs with optional filter selector",
        "modifiers": [],
        "params": [
          {
            "name": "subselector"
          }
        ],
        "returns": null,
        "description": "Queries root HTML element for all tabs with optional filter selector"
      },
      {
        "name": "moveSelectionIndicator",
        "docblock": "Calculate the new height, width, and position of the tab indicator.\nStore the CSS values so the transition animation can start.",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Calculate the new height, width, and position of the tab indicator.\nStore the CSS values so the transition animation can start."
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "defaultSelectedTabId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "renderActiveTabPanelOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Tag.react.js": {
    "description": "Tags are great for lists of strings.\n@param {*} props",
    "displayName": "Tag",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should appear in an active state."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should take up the full width of its container."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render before the children."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use minimal styles."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether tag content should be allowed to occupy multiple lines. If false, a single line of \ntext will be truncated with an ellipsis if it overflows. Note that icons will \nbe vertically centered relative to multiline text."
      },
      "rightIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the children."
      },
      "round": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should have rounded ends."
      }
    }
  },
  "src/lib/components/Tbody.react.js": {
    "description": "This is a reimplementation of html Tbody with an extra state that supports modifying the className\nwhen selected. This allows css styles to apply selectively to selected rows in a HTMLTable.",
    "displayName": "Tbody",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key"
      },
      "rowKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A proxy for key that can be passed through to the Tr component"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether row is selected"
      }
    }
  },
  "src/lib/components/Text.react.js": {
    "description": "The Text component adds accessible overflow behavior to a line of text by conditionally adding the title attribute and truncating with an ellipsis when content overflows its container.\n@param {*} props",
    "displayName": "Text",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "ellipsize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that this component should be truncated with an ellipsis if it overflows \nits container. The title attribute will also be added when content overflows to show \nthe full text of the children on hover.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag name to use for rendered element.",
        "defaultValue": {
          "value": "\"div\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Toaster.react.js": {
    "description": "The Toaster React component is a stateful container for a single list of toasts. Internally, it uses Overlay to manage children and transitions. It can be vertically aligned along the top or bottom edge of its container (new toasts will slide in from that edge) and horizontally aligned along the left edge, center, or right edge of its container.\n\nTODO: Document how to use a Toaster in Dash",
    "displayName": "Toaster",
    "methods": [
      {
        "name": "updateLocation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "href",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "toasterId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Unique identifier for a toaster. All Toasters with the same id\nwill render to the same underlying toaster. There is no guarantee\nwhich will instantiate first, so they should all be passed the\nsame Toaster props",
        "defaultValue": {
          "value": "'toaster'",
          "computed": false
        }
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a toast should acquire application focus when it first opens.\nThis is disabled by default so that toasts do not interrupt the user's\nflow. Note that enforceFocus is always disabled for Toasters.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Toast position",
        "defaultValue": {
          "value": "Position.TOP_RIGHT",
          "computed": true
        }
      },
      "canEscapeKeyClear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should clear all active toasts.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "toasts": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Toasts to display",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ToggleButtonGroup.react.js": {
    "description": "An alternate implementation of a RadioGroup, this allows a set of Button components\nto be selected, where only one is ever active.",
    "displayName": "ToggleButtonGroup",
    "methods": [
      {
        "name": "onButtonClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "alignText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text will be centered\nwithin the button. Passing `\"left\"` or `\"right\"` will align the button\ntext to that side and push `icon` and `rightIcon` to either edge. Passing\n`\"center\"` will center the text and icons together."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container.\n@default false"
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with minimal styling.\n@default false"
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child buttons should appear with large styling.\n@default false"
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling.\n@default false"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The key of the button last clicked"
      }
    }
  },
  "src/lib/components/Tooltip.react.js": {
    "description": "A tooltip is a lightweight popover for showing additional information during hover interactions.",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the user can interact with the element."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When enabled, preventDefault() is invoked on click events that close this popover, \nwhich will prevent those clicks from closing outer popovers. When disabled, \nclicking inside a Classes.POPOVER_DISMISS element will close the parent popover. \n\nSee http://blueprintjs.com/docs/#core/components/popover.closing-on-click"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "content": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The content that will be displayed inside of the tooltip."
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial opened state when uncontrolled."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to focus an element outside the overlay and this prop is enabled, then the overlay will immediately bring focus back to itself. If you are nesting overlay components, either disable this prop on the \"outermost\" overlays or mark the nested ones usePortal={false}."
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the tooltip should remain open after the user hovers off the trigger. The timer is canceled if the user mouses over the target before it expires."
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the tooltip should wait before opening after the user hovers over the trigger. The timer is canceled if the user mouses away from the target before it expires."
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a popover that uses a Portal should automatically inherit the dark theme from its parent."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "\"hover\" | \"hover-target\"PopoverInteractionKind.HOVER_TARGET_ONLY \nThe kind of hover interaction that triggers the display of the tooltip. Tooltips do not support click interactions."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover is visible. Passing this prop puts the popover in controlled mode, where the only way to change visibility is by updating this property. If disabled={true}, this prop will be ignored, and the popover will remain closed."
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the DOM when the overlay is opened for the first time; otherwise this happens when the component mounts. Lazy mounting provides noticeable performance improvements if you have lots of overlays at once, such as on each row of a table."
      },
      "openOnTargetFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover should open when its target is focused. If true, target will render with tabindex=\"0\" to make it focusable via keyboard navigation."
      },
      "popoverClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited string of class names applied to the popover element."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The position (relative to the target) at which the popover should appear.\n\nThe default value of \"auto\" will choose the best position when opened and will allow the popover to reposition itself to remain onscreen as the user scrolls around."
      },
      "targetClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the target element."
      },
      "targetProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "HTML props to spread to target element. Use targetTagName to change the type of element rendered. Note that ref is not supported."
      },
      "targetTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag name for the target element. This must be an HTML element to ensure that it supports the necessary DOM event handlers.\n\nBy default, a <span> tag is used so popovers appear as inline-block elements and can be nested in text. Use <div> tag for a block element."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the tooltip's appear/disappear transition takes. This is used by React CSSTransition to know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you override Blueprint's default transitions with new transitions of a different length."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover should be rendered inside a Portal attached to portalContainer prop.\n\nRendering content inside a Portal allows the popover content to escape the physical bounds of its parent while still being positioned correctly relative to its target. Using a Portal is necessary if any ancestor of the target hides overflow or uses very complex positioning.\n\nNot using a Portal can result in smoother performance when scrolling and allows the popover content to inherit CSS styles from surrounding elements, but it remains subject to the overflow bounds of its ancestors."
      },
      "wrapperTagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML tag name for the wrapper element, which also receives the className prop."
      }
    }
  },
  "src/lib/components/Tr.react.js": {
    "description": "This is a reimplementation of html Tr with an extra state that supports modifying the className\nwhen selected. This allows css styles to apply selectively to selected rows in a HTMLTable.",
    "displayName": "Tr",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key"
      },
      "rowKey": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A proxy for key that can be passed through to the Tr component"
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether row is selected"
      }
    }
  },
  "src/lib/components/Tree.react.js": {
    "description": "Trees display hierarchical data. In this implementation, selecting a Node in the tree\nredirects to the given href",
    "displayName": "Tree",
    "methods": [
      {
        "name": "handleNodeClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          },
          {
            "name": "_nodePath",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "forEachNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodes",
            "type": null
          },
          {
            "name": "callback",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNodeExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNodeCollapse",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeData",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A callback for firing events to dash."
      },
      "nodes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Set of nodes to be rendered"
      },
      "selectedNode": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Currently selected node"
      }
    }
  },
  "src/lib/components/hocs/Histogram.react.js": {
    "description": "This component provides Blueprint styling to native HTML tables.\n\nIt also includes additional functionality for searching, ordering and pagination of\ndata in the table.\n\nIMPORTANT: When creating rows, you MUST use the BlueprintJS Tr component if you\nwant selection to show properly, and use css to modify rows with className 'selected'\n@param props\n@returns {*}\n@constructor",
    "displayName": "Histogram",
    "methods": [
      {
        "name": "filterRows",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "rows": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Row data used to create the histogram",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "maxCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum count to be included in the histogram. Values above this number\nwill be rendered a different colour"
      },
      "row_click": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key for the clicked row"
      },
      "page_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Page size (in rows)",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "show_more_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of rows to increase/decrease page size by\n(for use in simple show more mode)",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "show_more_less": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show simple more/less buttons to adjust page size",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether row selection is enabled",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selection": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Currently selected rows"
      },
      "showCount": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show count on histogram bar",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/hocs/PropertyTable.react.js": {
    "description": "This component provides Blueprint styling to native HTML tables.\n\nIt also includes additional functionality for searching, ordering and pagination of\ndata in the table.\n\nIMPORTANT: When creating rows, you MUST use the BlueprintJS Tr component if you\nwant selection to show properly, and use css to modify rows with className 'selected'\n@param props\n@returns {*}\n@constructor",
    "displayName": "PropertyTable",
    "methods": [
      {
        "name": "renderHeader",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "columns",
            "type": null
          },
          {
            "name": "actions",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "sortRows",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredRows",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "truncateRows",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "filteredRows",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filterRows",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The children of this component"
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "role": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ARIA role attribute"
      },
      "data-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard data attribute"
      },
      "aria-*": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A wildcard aria attribute"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties."
      },
      "rows": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Row data used to create the histogram",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "maxCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum count to be included in the histogram. Values above this number\nwill be rendered a different colour"
      },
      "row_click": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Key for the clicked row"
      },
      "page_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Page size (in rows)",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "show_more_size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of rows to increase/decrease page size by\n(for use in simple show more mode)",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "show_more_less": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show simple more/less buttons to adjust page size",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether row selection is enabled",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "selection": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Currently selected rows"
      },
      "columns": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array of properties to display in the table"
      },
      "actions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "A set of actions to display in the first column"
      },
      "actionButtonProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Props to pass through to the action button",
        "defaultValue": {
          "value": "{\n    minimal: true,\n    small: true,\n}",
          "computed": false
        }
      },
      "locateAction": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Row selected for locate action"
      },
      "infoAction": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Row clicked for info action"
      },
      "action": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic action not covered by previous options"
      },
      "fuzzyMatch": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to match single string objects against parts of words",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/spark/Sparkline.react.js": {
    "description": "@param props\n@returns {*}\n@constructor",
    "displayName": "Sparkline",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app."
      },
      "key": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A unique identifier for the component, used to improve\nperformance by React.js while rendering components\nSee https://reactjs.org/docs/lists-and-keys.html for more info"
      },
      "ariaLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Aria label",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "Data to display in the sparkline"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the svg including left/right margin",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "shape",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "chart margin, leave room for labels! note 0 may clip LineSeries and PointSeries. a partial { top/right/bottom/ left } object is filled with the other default values",
        "defaultValue": {
          "value": "{ top: 16, right: 16, bottom: 16, left: 16 }",
          "computed": false
        }
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Optionally set the maximum y-value of the chart (e.g., to coordinate axes across multiple Sparklines)"
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Optionally set the minimum y-value of the chart (e.g., to coordinate axes across multiple Sparklines)"
      },
      "lineSeries": {
        "type": {
          "name": "shape",
          "value": {
            "fill": {
              "name": "string",
              "required": false
            },
            "fillOpacity": {
              "name": "number",
              "required": false
            },
            "curve": {
              "name": "enum",
              "value": [
                {
                  "value": "'linear'",
                  "computed": false
                },
                {
                  "value": "'cardinal'",
                  "computed": false
                },
                {
                  "value": "'basis'",
                  "computed": false
                },
                {
                  "value": "'monotoneX'",
                  "computed": false
                }
              ],
              "required": false
            },
            "showArea": {
              "name": "bool",
              "required": false
            },
            "showLine": {
              "name": "bool",
              "required": false
            },
            "stroke": {
              "name": "string",
              "required": false
            },
            "strokeDasharray": {
              "name": "string",
              "required": false
            },
            "strokeLinecap": {
              "name": "enum",
              "value": [
                {
                  "value": "'butt'",
                  "computed": false
                },
                {
                  "value": "'square'",
                  "computed": false
                },
                {
                  "value": "'round'",
                  "computed": false
                },
                {
                  "value": "'inherit'",
                  "computed": false
                }
              ],
              "required": false
            },
            "strokeWidth": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Properties to pass through for a LineSeries object"
      },
      "barSeries": {
        "type": {
          "name": "shape",
          "value": {
            "fill": {
              "name": "string",
              "required": false
            },
            "fillOpacity": {
              "name": "number",
              "required": false
            },
            "stroke": {
              "name": "string",
              "required": false
            },
            "strokeWidth": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Properties to pass through for a BarSeries object"
      }
    }
  }
}